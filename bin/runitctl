#!/usr/bin/python3
import argparse
import sys
import os
import subprocess


def hook_list(param):
    lists = [["Name", "Status", "Pid", "Uptime"]]
    service_lists = os.listdir("/etc/sv")
    enabled_service = os.listdir("/var/service")

    for service in service_lists:
        if service in enabled_service:
            etime_output = subprocess.run(
                ["ps", "-C", service, "-o", "etime="],
                check=False, text=True, capture_output=True
            )

            pid_output = subprocess.run(
                ["ps", "-C", service, "-o", "pid="],
                check=False, text=True, capture_output=True
            )

            pid_lines = pid_output.stdout.strip().splitlines()
            pid = pid_lines[0] if pid_lines else "0"
            time_lines = etime_output.stdout.strip().splitlines()
            etime = time_lines[0] if time_lines else "0"

            if service:
                lists.append([service, "enabled", pid, etime])
        else:
            if service:
                lists.append([service, "disabled", "0", "0"])

    sorted_lists = sorted(lists[1:], key=lambda x: 0 if x[1] == "enabled" else 1)
    sorted_lists.insert(0, lists[0])

    col_widths = [max(len(str(row[i])) for row in sorted_lists) for i in range(len(sorted_lists[0]))]

    for row in sorted_lists:
        print("  ".join(str(val).ljust(col_widths[i]) for i, val in enumerate(row)))


def hook_disable(param):
    pass


def hook_enable(param):
    pass


def hook_start(param):
    pass


def hook_stop(param):
    pass


if __name__ == "__main__":
    cmd_parser = argparse.ArgumentParser("Simple runit service manager")
    subparser = cmd_parser.add_subparsers(dest="command")

    cmd_list = subparser.add_parser("list", description="Get list services")
    cmd_list.set_defaults(func=hook_list)

    cmd_enabled = subparser.add_parser("enable", description="Enable service")
    cmd_enabled.set_defaults(func=hook_enable)

    args = cmd_parser.parse_args(args=None if sys.argv[1:] else ["--help"])

    if hasattr(args, "func"):
        args.func(args)
